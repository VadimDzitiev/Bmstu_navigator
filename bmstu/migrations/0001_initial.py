# Generated by Django 4.2.8 on 2023-12-13 15:19

import bmstu.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Users',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.CharField(max_length=500, unique=True)),
                ('password', models.CharField(blank=True, max_length=500, null=True)),
                ('is_moderator', models.BooleanField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'Users',
                'managed': True,
            },
            managers=[
                ('objects', bmstu.models.NewUserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Request',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[(1, 'Черновик'), (2, 'Удален'), (3, 'Сформирован'), (4, 'Завершен'), (5, 'Отклонен')], max_length=100, verbose_name='Статус')),
                ('created_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('completion_date', models.DateTimeField(auto_now=True, null=True, verbose_name='Дата выполнения')),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Курс')),
            ],
            options={
                'db_table': 'requests',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='Маршрут')),
                ('status', models.BooleanField(default=True, verbose_name='Статус')),
                ('buildings', models.BinaryField(blank=True, null=True, verbose_name='Фото строений')),
                ('transition', models.BinaryField(blank=True, null=True, verbose_name='Фото маршрута')),
                ('transition_time', models.CharField(max_length=100, verbose_name='Время перехода')),
                ('description', models.CharField(max_length=200, verbose_name='Описание')),
            ],
            options={
                'db_table': 'service',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='RequestService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('request', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bmstu.request', verbose_name='Заявка')),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='bmstu.service', verbose_name='Услуга')),
            ],
            options={
                'db_table': 'requestservice',
                'managed': True,
            },
        ),
    ]
